# -*- coding: utf-8 -*-
"""FIX FASTER R-CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BAMQC3Rdcg-LvW5OlxfOLtKY6kI3dj5D
"""

from google.colab import drive
drive.mount('/content/drive')

# Install Tensor Flow Model Maker
!pip install -q tflite-model-maker

# Import Library
!sudo apt-get install libportaudio2
!pip install -q tflite-model-maker

import os
import sounddevice as sd
import numpy as np
import tensorflow as tf

assert tf.__version__.startswith('2')

from tflite_model_maker import model_spec
from tflite_model_maker import image_classifier
from tflite_model_maker.config import ExportFormat
from tflite_model_maker.config import QuantizationConfig
from tflite_model_maker.image_classifier import DataLoader

from PIL import Image as pil
import matplotlib.pyplot as plt

# Buat Folder Hasil
folderHasil = '/content/drive/MyDrive/Colab Notebooks/Hasil'
folderBatubara = '/content/drive/MyDrive/Colab Notebooks/Batubara/Foto'

for namaFolder in os.listdir(folderBatubara):
  f = os.path.join(folderHasil, namaFolder)
  if not os.path.exists(f):
    os.makedirs(f)

# Pre-processing Foto
for namaFolder in os.listdir(folderBatubara):
  index = 1
  d = os.path.join(folderBatubara, namaFolder)
  for namaFoto in os.listdir(d):
    f = os.path.join(d, namaFoto)
    data = pil.open(f)

    # Flip Foto Kanan Ke Kiri
    data.transpose(pil.FLIP_LEFT_RIGHT).save(folderHasil+'/'+namaFolder+'/'+str(index)+'.JPG')
    index += 1
    
    # Rotate Foto 90 Derajat
    data.transpose(pil.ROTATE_90).save(folderHasil+'/'+namaFolder+'/'+str(index)+'.JPG')
    index += 1

    # Flip Foto Atas Ke Bawah
    data.transpose(pil.ROTATE_90).transpose(pil.FLIP_TOP_BOTTOM).save(folderHasil+'/'+namaFolder+'/'+str(index)+'.JPG')
    index += 1

import tensorflow as tf

dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/My Drive/Colab Notebooks/Hasil/',
    shuffle=True,
    image_size = (256,256),
    batch_size = 8
)

class_names = dataset.class_names
class_names

data_train = dataset.take(int(0.8*len(dataset)))
data_val = dataset.skip(len(data_train)).take(int(0.1*len(dataset)))
data_test = dataset.skip(len(data_train)).skip(len(data_val))

from tensorflow.keras.applications.vgg16 import VGG16,preprocess_input

base_model = VGG16(input_shape = (256,256,3),
                   include_top = False,
                   weights= 'imagenet')

for layer in base_model.layers:
  layer.trainable = False

vgg_preprocess = preprocess_input
data_train.preprocessing_function = vgg_preprocess

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, BatchNormalization

model = Sequential()
model.add(base_model)

model.add(Flatten())

model.add(Dense(units=128, kernel_initializer='normal', activation='tanh'))
model.add(Dense(units=32, kernel_initializer='normal', activation='tanh'))
model.add(Dense(units=3, kernel_initializer='uniform', activation = 'softmax'))

model.compile(optimizer = 'adam',loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics = ['accuracy'])

model.summary()

model.fit(data_train,batch_size=8, epochs=5, validation_data = data_val)

model.evaluate(data_test)

model.save('my_model.h5') 
model = tf.keras.models.load_model('my_model.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open("converted_model.tflite", "wb").write(tflite_model)